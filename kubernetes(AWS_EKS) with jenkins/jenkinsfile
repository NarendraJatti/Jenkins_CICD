pipeline {
    agent any
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-creds') // Jenkins credentials ID for Docker Hub
        DOCKER_IMAGE = 'your-dockerhub-username/your-app-name'
        K8S_NAMESPACE = 'your-k8s-namespace' // Replace with your Kubernetes namespace
        K8S_DEPLOYMENT = 'your-k8s-deployment-name' // Replace with your Kubernetes deployment name
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout the code from the source control (GitHub/GitLab)
                checkout scm
            }
        }
        
        stage('Run Tests') {
            steps {
                // Run pytest for unit testing
                sh 'pytest'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    sh "docker build -t ${DOCKER_IMAGE}:${env.BUILD_NUMBER} ."
                }
            }
        }
        
        stage('Docker Hub Login') {
            steps {
                script {
                    // Login to Docker Hub
                    sh "echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin"
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    // Push the Docker image to Docker Hub
                    sh "docker push ${DOCKER_IMAGE}:${env.BUILD_NUMBER}"
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Update the Kubernetes deployment to use the new image
                    sh """
                    kubectl set image deployment/${K8S_DEPLOYMENT} ${K8S_DEPLOYMENT}=${DOCKER_IMAGE}:${env.BUILD_NUMBER} -n ${K8S_NAMESPACE}
                    """
                }
            }
        }
    }
    
    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
